@model StudentTasksModel[]

@{
    ViewData["Title"] = "Student Tasks";
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

<h1 style="color:black;margin-top:100px;margin-left:90px;font-family:Garamond"><b>New Tasks</b></h1>

@if (Model == null || Model.Length == 0)
{
    <div class="task-container">
        <table class="table table-striped task-table">
            <thead>
                <tr>
                    <th>Batch</th>
                    <th>Description</th>
                    <th>Attachment Path</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
        </table>
        <br />
        <p class="no-tasks-message">No tasks found for the student.</p>
    </div>
}
else
{
    <div class="task-container">
        <div class="table-responsive">
            <table class="table table-striped task-table">
                <thead>
                    <tr>
                        <th>Batch</th>
                        <th>Description</th>
                        <th>Attachment Path</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in Model)
                    {
                        var formattedCreatedAt = task.CreatedAt.ToString("yyyy-MM-ddTHH:mm:ss");

                        <tr>
                            <td>@task.Batch</td>
                            <td>@task.Description</td>
                            <td>
                                <a href="@Url.Content("~/" + task.AttachmentPath)" class="btn btn-danger btn-sm" download>Download</a>
                            </td>
                            <td>@task.Status</td>
                            <td>
                                <button type="button" class="btn btn-primary btn-sm upload-btn" onclick="checkLate(@task.Id, '@formattedCreatedAt')"
                                @(task.Status == "Assigned" || task.Status == "Rejected" ? "" : "disabled")>
                                    Upload File
                                </button>

                                <!-- Modal -->
                                <div class="modal fade" id="uploadModal-@task.Id" tabindex="-1" role="dialog" aria-labelledby="uploadModalLabel-@task.Id" aria-hidden="true">
                                    <div class="modal-dialog" role="document">
                                        <div class="modal-content">
                                            <div class="modal-header">
                                                <h5 class="modal-title" id="uploadModalLabel-@task.Id">Upload File for Task @task.Id</h5>
                                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                            </div>
                                            <div class="modal-body">
                                                <form id="uploadForm-@task.Id" onsubmit="submitTask(event, @task.Id, '@formattedCreatedAt')">
                                                    <input type="hidden" id="TaskId-@task.Id" name="TaskId" value="@task.Id">
                                                    <input type="hidden" id="LateReason-@task.Id" name="LateReason">
                                                    <div class="form-group">
                                                        <label for="file-@task.Id">Upload File:</label>
                                                        <input type="file" class="form-control-file" id="file-@task.Id" name="File" required>
                                                    </div>
                                                    <br />
                                                    <button type="submit" class="btn btn-primary submit-button">Submit Task</button>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

<style>
    body {
        font-family: 'Century Gothic';
        background-color: #f4f4f9;
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
        font-size: 2rem;
        color: #333;
    }

    .task-container {
        width: 80%;
        margin-left: auto;
        margin-right: 0;
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        margin-top: 20px;
    }

    .table {
        width: 100%;
        margin-bottom: 1rem;
        background-color: transparent;
        border-collapse: separate;
        border-spacing: 0 15px;
    }

        .table th, .table td {
            vertical-align: middle;
            padding: 12px;
            background-color: #fff;
            border-top: none;
        }

        .table th {
            background-color: #f8f9fa;
            color: #333;
            font-weight: bold;
        }

        .table tbody tr {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .btn-sm {
        padding: 5px 10px;
        font-size: 0.875rem;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

    .modal-header {
        background-color: #f8f9fa;
    }

    .modal-content {
        border-radius: 8px;
    }

    .modal-header .close {
        margin: -1rem -1rem -1rem auto;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .submit-button {
        display: block;
        width: 100%;
        padding: 10px;
        font-size: 1rem;
    }

    .no-tasks-message {
        text-align: center;
        color: red;
        font-size: 1.25rem;
        margin-top: 20px;
    }
</style>

<script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script>
    function checkLate(taskId, createdAt) {
        const createdDate = new Date(createdAt);
        const currentDate = new Date();
        const hoursDiff = Math.abs(currentDate - createdDate) / 36e5;

        if (hoursDiff > 24) {
            const lateReason = prompt("You are submitting this task late. Please provide a reason:");
            if (lateReason) {
                document.getElementById(LateReason - ${ taskId }).value = lateReason;
                $(#uploadModal - ${ taskId }).modal('show');
            } else {
                alert("Please provide a reason for late submission.");
            }
        } else {
            $(#uploadModal - ${ taskId }).modal('show');
        }
    }

    async function submitTask(event, taskId, createdAt) {
        event.preventDefault();
        const fileInput = document.getElementById(file - ${ taskId });
        const file = fileInput.files[0];

        if (!file) {
            alert("Please select a file to upload.");
            return;
        }

        const lateReason = document.getElementById(LateReason - ${ taskId }).value;

        const submitButton = event.target.querySelector('.submit-button');
        submitButton.disabled = true;

        const formData = new FormData();
        formData.append("TaskId", taskId);
        formData.append("File", file);
        if (lateReason == "" || lateReason == undefined) {
            formData.append("LateReason", "");
            formData.append("CommitmentStatus", "ontime");
        } else {
            formData.append("CommitmentStatus", "late");
            formData.append("LateReason", lateReason);
        }

        try {
            const response = await fetch("/Task/SubmitTask", {
                method: "POST",
                body: formData
            });

            if (response.ok) {
                const result = await response.json();
                alert(result.Message || "Task submitted successfully.");
                $(#uploadModal - ${ taskId }).modal('hide');
                document.querySelector(button[onclick = "checkLate(${taskId}, '${createdAt}')"]).disabled = true;
            } else {
                const error = await response.json();
                alert("Failed to submit task: " + (error.Message || response.statusText));
            }
        } catch (error) {
            console.error("Error submitting task:", error);
            alert("Error submitting task: " + error.message);
        }
    }
</script>