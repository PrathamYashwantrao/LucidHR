@model StudentTasksModel[]

@{
    ViewData["Title"] = "Student Tasks";
}

<h1>Student Tasks</h1>

@if (Model == null || Model.Length == 0)
{
    <div class="alert alert-warning" role="alert">
        No tasks found for the student.
    </div>
}
else
{
    <div class="table-responsive">
        <table class="table table-sm table-bordered table-hover">
            <thead class="thead-light">
                <tr>
                    <th>Batch</th>
                    <th>Description</th>
                    <th>Attachment</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Model)
                {
                    <tr>
                        <td>@task.Batch</td>
                        <td>@task.Description</td>
                        <td>
                            <a href="@Url.Content("~/" + task.AttachmentPath)" class="btn btn-danger btn-sm" download>Download</a>
                        </td>
                        <td>
                            @if (!task.IsSubmitted)
                            {
                                <form onsubmit="submitTask(event, @task.Id)">
                                    <input type="hidden" id="TaskId-@task.Id" name="TaskId" value="@task.Id">
                                    <div class="form-group">
                                        <label for="file-@task.Id">Upload File:</label>
                                        <input type="file" class="form-control-file" id="file-@task.Id" name="File" required>
                                    </div>
                                    <button type="submit" class="btn btn-primary btn-sm">Submit Task</button>
                                </form>
                            }
                            else
                            {
                                <p>Task already submitted.</p>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<style>
    .table thead th {
        font-weight: bold;
    }

    .table tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    .table tbody tr:hover {
        background-color: #e9ecef;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .alert {
        margin-top: 20px;
    }

    h1 {
        margin-bottom: 20px;
    }
</style>

<script>
    async function submitTask(event, taskId) {
        event.preventDefault();

        const fileInput = document.getElementById(file - ${ taskId });
        const file = fileInput.files[0];

        if (!file) {
            alert("Please select a file to upload.");
            return;
        }

        const formData = new FormData();
        formData.append("TaskId", taskId);
        formData.append("File", file);

        try {
            const response = await fetch("/Task/SubmitTask", {
                method: "POST",
                body: formData,
                mode: 'cors'
            });

            if (response.ok) {
                const result = await response.json();
                alert(result.Message || "Task submitted successfully.");

                // Reload the page to reflect the changes
                window.location.reload();
            } else {
                const error = await response.json();
                alert("Failed to submit task: " + (error.Message || response.statusText));
            }
        } catch (error) {
            console.error("Error submitting task:", error);
            alert("Error submitting task: " + error.message);
        }
    }
</script>